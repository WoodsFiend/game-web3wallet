{"mappings":"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","sources":["<anon>","node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js","node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts","node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts","node_modules/viem/node_modules/@noble/curves/esm/abstract/utils.js","node_modules/viem/node_modules/@noble/curves/src/abstract/utils.ts","node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts","node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts","node_modules/viem/node_modules/@noble/curves/esm/abstract/hash-to-curve.js","node_modules/viem/node_modules/@noble/curves/src/abstract/hash-to-curve.ts","node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js","node_modules/viem/node_modules/@noble/curves/src/_shortw_utils.ts","node_modules/@noble/hashes/esm/hmac.js","node_modules/@noble/hashes/src/hmac.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequired248\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6DvV7\", function(module, exports) {\n\n$parcel$export(module.exports, \"secp256k1\", function () { return $4d4f254bf0c59c76$export$529e6123e9353a90; });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nvar $fH4ic = parcelRequire(\"fH4ic\");\n\nvar $2jOf5 = parcelRequire(\"2jOf5\");\n\nvar $fCtua = parcelRequire(\"fCtua\");\n\nvar $iMxCB = parcelRequire(\"iMxCB\");\n\nvar $52MQK = parcelRequire(\"52MQK\");\n\nvar $k5yZc = parcelRequire(\"k5yZc\");\n\nvar $eZ4PV = parcelRequire(\"eZ4PV\");\nconst $4d4f254bf0c59c76$var$secp256k1P = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\");\nconst $4d4f254bf0c59c76$var$secp256k1N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst $4d4f254bf0c59c76$var$_1n = BigInt(1);\nconst $4d4f254bf0c59c76$var$_2n = BigInt(2);\nconst $4d4f254bf0c59c76$var$divNearest = (a, b)=>(a + b / $4d4f254bf0c59c76$var$_2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */ function $4d4f254bf0c59c76$var$sqrtMod(y) {\n    const P = $4d4f254bf0c59c76$var$secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = y * y * y % P; // x^3, 11\n    const b3 = b2 * b2 * y % P; // x^7\n    const b6 = (0, $fCtua.pow2)(b3, _3n, P) * b3 % P;\n    const b9 = (0, $fCtua.pow2)(b6, _3n, P) * b3 % P;\n    const b11 = (0, $fCtua.pow2)(b9, $4d4f254bf0c59c76$var$_2n, P) * b2 % P;\n    const b22 = (0, $fCtua.pow2)(b11, _11n, P) * b11 % P;\n    const b44 = (0, $fCtua.pow2)(b22, _22n, P) * b22 % P;\n    const b88 = (0, $fCtua.pow2)(b44, _44n, P) * b44 % P;\n    const b176 = (0, $fCtua.pow2)(b88, _88n, P) * b88 % P;\n    const b220 = (0, $fCtua.pow2)(b176, _44n, P) * b44 % P;\n    const b223 = (0, $fCtua.pow2)(b220, _3n, P) * b3 % P;\n    const t1 = (0, $fCtua.pow2)(b223, _23n, P) * b22 % P;\n    const t2 = (0, $fCtua.pow2)(t1, _6n, P) * b2 % P;\n    const root = (0, $fCtua.pow2)(t2, $4d4f254bf0c59c76$var$_2n, P);\n    if (!$4d4f254bf0c59c76$var$Fp.eql($4d4f254bf0c59c76$var$Fp.sqr(root), y)) throw new Error(\"Cannot find square root\");\n    return root;\n}\nconst $4d4f254bf0c59c76$var$Fp = (0, $fCtua.Field)($4d4f254bf0c59c76$var$secp256k1P, undefined, undefined, {\n    sqrt: $4d4f254bf0c59c76$var$sqrtMod\n});\nconst $4d4f254bf0c59c76$export$529e6123e9353a90 = (0, $eZ4PV.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp: $4d4f254bf0c59c76$var$Fp,\n    n: $4d4f254bf0c59c76$var$secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n    Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */ endo: {\n        beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n        splitScalar: (k)=>{\n            const n = $4d4f254bf0c59c76$var$secp256k1N;\n            const a1 = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\");\n            const b1 = -$4d4f254bf0c59c76$var$_1n * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\");\n            const a2 = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\");\n            const b2 = a1;\n            const POW_2_128 = BigInt(\"0x100000000000000000000000000000000\"); // (2n**128n).toString(16)\n            const c1 = $4d4f254bf0c59c76$var$divNearest(b2 * k, n);\n            const c2 = $4d4f254bf0c59c76$var$divNearest(-b1 * k, n);\n            let k1 = (0, $fCtua.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0, $fCtua.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg) k1 = n - k1;\n            if (k2neg) k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error(\"splitScalar: Endomorphism failed, k=\" + k);\n            return {\n                k1neg: k1neg,\n                k1: k1,\n                k2neg: k2neg,\n                k2: k2\n            };\n        }\n    }\n}, (0, $fH4ic.sha256));\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst $4d4f254bf0c59c76$var$_0n = BigInt(0);\nconst $4d4f254bf0c59c76$var$fe = (x)=>typeof x === \"bigint\" && $4d4f254bf0c59c76$var$_0n < x && x < $4d4f254bf0c59c76$var$secp256k1P;\nconst $4d4f254bf0c59c76$var$ge = (x)=>typeof x === \"bigint\" && $4d4f254bf0c59c76$var$_0n < x && x < $4d4f254bf0c59c76$var$secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const $4d4f254bf0c59c76$var$TAGGED_HASH_PREFIXES = {};\nfunction $4d4f254bf0c59c76$var$taggedHash(tag, ...messages) {\n    let tagP = $4d4f254bf0c59c76$var$TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0, $fH4ic.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));\n        tagP = (0, $52MQK.concatBytes)(tagH, tagH);\n        $4d4f254bf0c59c76$var$TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, $fH4ic.sha256)((0, $52MQK.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst $4d4f254bf0c59c76$var$pointToBytes = (point)=>point.toRawBytes(true).slice(1);\nconst $4d4f254bf0c59c76$var$numTo32b = (n)=>(0, $52MQK.numberToBytesBE)(n, 32);\nconst $4d4f254bf0c59c76$var$modP = (x)=>(0, $fCtua.mod)(x, $4d4f254bf0c59c76$var$secp256k1P);\nconst $4d4f254bf0c59c76$var$modN = (x)=>(0, $fCtua.mod)(x, $4d4f254bf0c59c76$var$secp256k1N);\nconst $4d4f254bf0c59c76$var$Point = $4d4f254bf0c59c76$export$529e6123e9353a90.ProjectivePoint;\nconst $4d4f254bf0c59c76$var$GmulAdd = (Q, a, b)=>$4d4f254bf0c59c76$var$Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction $4d4f254bf0c59c76$var$schnorrGetExtPubKey(priv) {\n    let d_ = $4d4f254bf0c59c76$export$529e6123e9353a90.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = $4d4f254bf0c59c76$var$Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : $4d4f254bf0c59c76$var$modN(-d_);\n    return {\n        scalar: scalar,\n        bytes: $4d4f254bf0c59c76$var$pointToBytes(p)\n    };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */ function $4d4f254bf0c59c76$var$lift_x(x) {\n    if (!$4d4f254bf0c59c76$var$fe(x)) throw new Error(\"bad x: need 0 < x < p\"); // Fail if x ≥ p.\n    const xx = $4d4f254bf0c59c76$var$modP(x * x);\n    const c = $4d4f254bf0c59c76$var$modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = $4d4f254bf0c59c76$var$sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % $4d4f254bf0c59c76$var$_2n !== $4d4f254bf0c59c76$var$_0n) y = $4d4f254bf0c59c76$var$modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new $4d4f254bf0c59c76$var$Point(x, y, $4d4f254bf0c59c76$var$_1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */ function $4d4f254bf0c59c76$var$challenge(...args) {\n    return $4d4f254bf0c59c76$var$modN((0, $52MQK.bytesToNumberBE)($4d4f254bf0c59c76$var$taggedHash(\"BIP0340/challenge\", ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */ function $4d4f254bf0c59c76$var$schnorrGetPublicKey(privateKey) {\n    return $4d4f254bf0c59c76$var$schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */ function $4d4f254bf0c59c76$var$schnorrSign(message, privateKey, auxRand = (0, $2jOf5.randomBytes)(32)) {\n    const m = (0, $52MQK.ensureBytes)(\"message\", message);\n    const { bytes: px, scalar: d } = $4d4f254bf0c59c76$var$schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0, $52MQK.ensureBytes)(\"auxRand\", auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = $4d4f254bf0c59c76$var$numTo32b(d ^ (0, $52MQK.bytesToNumberBE)($4d4f254bf0c59c76$var$taggedHash(\"BIP0340/aux\", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = $4d4f254bf0c59c76$var$taggedHash(\"BIP0340/nonce\", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = $4d4f254bf0c59c76$var$modN((0, $52MQK.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === $4d4f254bf0c59c76$var$_0n) throw new Error(\"sign failed: k is zero\"); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = $4d4f254bf0c59c76$var$schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = $4d4f254bf0c59c76$var$challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set($4d4f254bf0c59c76$var$numTo32b($4d4f254bf0c59c76$var$modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!$4d4f254bf0c59c76$var$schnorrVerify(sig, m, px)) throw new Error(\"sign: Invalid signature produced\");\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */ function $4d4f254bf0c59c76$var$schnorrVerify(signature, message, publicKey) {\n    const sig = (0, $52MQK.ensureBytes)(\"signature\", signature, 64);\n    const m = (0, $52MQK.ensureBytes)(\"message\", message);\n    const pub = (0, $52MQK.ensureBytes)(\"publicKey\", publicKey, 32);\n    try {\n        const P = $4d4f254bf0c59c76$var$lift_x((0, $52MQK.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0, $52MQK.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!$4d4f254bf0c59c76$var$fe(r)) return false;\n        const s = (0, $52MQK.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!$4d4f254bf0c59c76$var$ge(s)) return false;\n        const e = $4d4f254bf0c59c76$var$challenge($4d4f254bf0c59c76$var$numTo32b(r), $4d4f254bf0c59c76$var$pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = $4d4f254bf0c59c76$var$GmulAdd(P, s, $4d4f254bf0c59c76$var$modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    } catch (error) {\n        return false;\n    }\n}\nconst $4d4f254bf0c59c76$export$1f2401df071be9f = /* @__PURE__ */ (()=>({\n        getPublicKey: $4d4f254bf0c59c76$var$schnorrGetPublicKey,\n        sign: $4d4f254bf0c59c76$var$schnorrSign,\n        verify: $4d4f254bf0c59c76$var$schnorrVerify,\n        utils: {\n            randomPrivateKey: $4d4f254bf0c59c76$export$529e6123e9353a90.utils.randomPrivateKey,\n            lift_x: $4d4f254bf0c59c76$var$lift_x,\n            pointToBytes: $4d4f254bf0c59c76$var$pointToBytes,\n            numberToBytesBE: $52MQK.numberToBytesBE,\n            bytesToNumberBE: $52MQK.bytesToNumberBE,\n            taggedHash: $4d4f254bf0c59c76$var$taggedHash,\n            mod: $fCtua.mod\n        }\n    }))();\nconst $4d4f254bf0c59c76$var$isoMap = /* @__PURE__ */ (()=>(0, $k5yZc.isogenyMap)($4d4f254bf0c59c76$var$Fp, [\n        // xNum\n        [\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\n            \"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\n            \"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"\n        ],\n        // xDen\n        [\n            \"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\n            \"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ],\n        // yNum\n        [\n            \"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\n            \"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\n            \"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\n            \"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"\n        ],\n        // yDen\n        [\n            \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\n            \"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\n            \"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ]\n    ].map((i)=>i.map((j)=>BigInt(j)))))();\nconst $4d4f254bf0c59c76$var$mapSWU = /* @__PURE__ */ (()=>(0, $iMxCB.mapToCurveSimpleSWU)($4d4f254bf0c59c76$var$Fp, {\n        A: BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),\n        B: BigInt(\"1771\"),\n        Z: $4d4f254bf0c59c76$var$Fp.create(BigInt(\"-11\"))\n    }))();\nconst $4d4f254bf0c59c76$var$htf = /* @__PURE__ */ (()=>(0, $k5yZc.createHasher)($4d4f254bf0c59c76$export$529e6123e9353a90.ProjectivePoint, (scalars)=>{\n        const { x: x, y: y } = $4d4f254bf0c59c76$var$mapSWU($4d4f254bf0c59c76$var$Fp.create(scalars[0]));\n        return $4d4f254bf0c59c76$var$isoMap(x, y);\n    }, {\n        DST: \"secp256k1_XMD:SHA-256_SSWU_RO_\",\n        encodeDST: \"secp256k1_XMD:SHA-256_SSWU_NU_\",\n        p: $4d4f254bf0c59c76$var$Fp.ORDER,\n        m: 1,\n        k: 128,\n        expand: \"xmd\",\n        hash: (0, $fH4ic.sha256)\n    }))();\nconst $4d4f254bf0c59c76$export$a95cc2b0cdb9c1e1 = /* @__PURE__ */ (()=>$4d4f254bf0c59c76$var$htf.hashToCurve)();\nconst $4d4f254bf0c59c76$export$124e820e7679cc3 = /* @__PURE__ */ (()=>$4d4f254bf0c59c76$var$htf.encodeToCurve)();\n\n});\nparcelRegister(\"fCtua\", function(module, exports) {\n\n$parcel$export(module.exports, \"mod\", function () { return $b5f146d485cc1393$export$842a2cf37af977e1; });\n$parcel$export(module.exports, \"pow2\", function () { return $b5f146d485cc1393$export$fa569bd808b67eef; });\n$parcel$export(module.exports, \"invert\", function () { return $b5f146d485cc1393$export$6897c284b6f9f4dc; });\n$parcel$export(module.exports, \"validateField\", function () { return $b5f146d485cc1393$export$bd454f0cef11418d; });\n$parcel$export(module.exports, \"nLength\", function () { return $b5f146d485cc1393$export$c79df43ecd7e66c2; });\n$parcel$export(module.exports, \"Field\", function () { return $b5f146d485cc1393$export$a455218a85c89869; });\n$parcel$export(module.exports, \"getMinHashLength\", function () { return $b5f146d485cc1393$export$d058763b563056af; });\n$parcel$export(module.exports, \"mapHashToField\", function () { return $b5f146d485cc1393$export$20cb21dbfa61dac3; });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Utilities for modular arithmetics and finite fields\n\nvar $52MQK = parcelRequire(\"52MQK\");\n// prettier-ignore\nconst $b5f146d485cc1393$var$_0n = BigInt(0), $b5f146d485cc1393$var$_1n = BigInt(1), $b5f146d485cc1393$var$_2n = BigInt(2), $b5f146d485cc1393$var$_3n = BigInt(3);\n// prettier-ignore\nconst $b5f146d485cc1393$var$_4n = BigInt(4), $b5f146d485cc1393$var$_5n = BigInt(5), $b5f146d485cc1393$var$_8n = BigInt(8);\n// prettier-ignore\nconst $b5f146d485cc1393$var$_9n = BigInt(9), $b5f146d485cc1393$var$_16n = BigInt(16);\nfunction $b5f146d485cc1393$export$842a2cf37af977e1(a, b) {\n    const result = a % b;\n    return result >= $b5f146d485cc1393$var$_0n ? result : b + result;\n}\nfunction $b5f146d485cc1393$export$9c297f60e22e3389(num, power, modulo) {\n    if (modulo <= $b5f146d485cc1393$var$_0n || power < $b5f146d485cc1393$var$_0n) throw new Error(\"Expected power/modulo > 0\");\n    if (modulo === $b5f146d485cc1393$var$_1n) return $b5f146d485cc1393$var$_0n;\n    let res = $b5f146d485cc1393$var$_1n;\n    while(power > $b5f146d485cc1393$var$_0n){\n        if (power & $b5f146d485cc1393$var$_1n) res = res * num % modulo;\n        num = num * num % modulo;\n        power >>= $b5f146d485cc1393$var$_1n;\n    }\n    return res;\n}\nfunction $b5f146d485cc1393$export$fa569bd808b67eef(x, power, modulo) {\n    let res = x;\n    while(power-- > $b5f146d485cc1393$var$_0n){\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\nfunction $b5f146d485cc1393$export$6897c284b6f9f4dc(number, modulo) {\n    if (number === $b5f146d485cc1393$var$_0n || modulo <= $b5f146d485cc1393$var$_0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = $b5f146d485cc1393$export$842a2cf37af977e1(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = $b5f146d485cc1393$var$_0n, y = $b5f146d485cc1393$var$_1n, u = $b5f146d485cc1393$var$_1n, v = $b5f146d485cc1393$var$_0n;\n    while(a !== $b5f146d485cc1393$var$_0n){\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== $b5f146d485cc1393$var$_1n) throw new Error(\"invert: does not exist\");\n    return $b5f146d485cc1393$export$842a2cf37af977e1(x, modulo);\n}\nfunction $b5f146d485cc1393$export$69f29ab1f3e9a234(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - $b5f146d485cc1393$var$_1n) / $b5f146d485cc1393$var$_2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for(Q = P - $b5f146d485cc1393$var$_1n, S = 0; Q % $b5f146d485cc1393$var$_2n === $b5f146d485cc1393$var$_0n; Q /= $b5f146d485cc1393$var$_2n, S++);\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for(Z = $b5f146d485cc1393$var$_2n; Z < P && $b5f146d485cc1393$export$9c297f60e22e3389(Z, legendreC, P) !== P - $b5f146d485cc1393$var$_1n; Z++);\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + $b5f146d485cc1393$var$_1n) / $b5f146d485cc1393$var$_4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + $b5f146d485cc1393$var$_1n) / $b5f146d485cc1393$var$_2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error(\"Cannot find square root\");\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while(!Fp.eql(b, Fp.ONE)){\n            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for(let t2 = Fp.sqr(b); m < r; m++){\n                if (Fp.eql(t2, Fp.ONE)) break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, $b5f146d485cc1393$var$_1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction $b5f146d485cc1393$export$33bda048c6b8ea7d(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % $b5f146d485cc1393$var$_4n === $b5f146d485cc1393$var$_3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + $b5f146d485cc1393$var$_1n) / $b5f146d485cc1393$var$_4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % $b5f146d485cc1393$var$_8n === $b5f146d485cc1393$var$_5n) {\n        const c1 = (P - $b5f146d485cc1393$var$_5n) / $b5f146d485cc1393$var$_8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, $b5f146d485cc1393$var$_2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, $b5f146d485cc1393$var$_2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    $b5f146d485cc1393$var$_9n;\n    // Other cases: Tonelli-Shanks algorithm\n    return $b5f146d485cc1393$export$69f29ab1f3e9a234(P);\n}\nconst $b5f146d485cc1393$export$7806f13ad5078b2f = (num, modulo)=>($b5f146d485cc1393$export$842a2cf37af977e1(num, modulo) & $b5f146d485cc1393$var$_1n) === $b5f146d485cc1393$var$_1n;\n// prettier-ignore\nconst $b5f146d485cc1393$var$FIELD_FIELDS = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction $b5f146d485cc1393$export$bd454f0cef11418d(field) {\n    const initial = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    };\n    const opts = $b5f146d485cc1393$var$FIELD_FIELDS.reduce((map, val)=>{\n        map[val] = \"function\";\n        return map;\n    }, initial);\n    return (0, $52MQK.validateObject)(field, opts);\n}\nfunction $b5f146d485cc1393$export$5d8ce3717733a987(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < $b5f146d485cc1393$var$_0n) throw new Error(\"Expected power > 0\");\n    if (power === $b5f146d485cc1393$var$_0n) return f.ONE;\n    if (power === $b5f146d485cc1393$var$_1n) return num;\n    let p = f.ONE;\n    let d = num;\n    while(power > $b5f146d485cc1393$var$_0n){\n        if (power & $b5f146d485cc1393$var$_1n) p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= $b5f146d485cc1393$var$_1n;\n    }\n    return p;\n}\nfunction $b5f146d485cc1393$export$a492e3387142c0e9(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction $b5f146d485cc1393$export$e74c665040343df6(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === \"bigint\" ? $b5f146d485cc1393$export$6897c284b6f9f4dc(rhs, f.ORDER) : f.inv(rhs));\n}\nfunction $b5f146d485cc1393$export$5e2b6e87f2891ea7(f) {\n    const legendreConst = (f.ORDER - $b5f146d485cc1393$var$_1n) / $b5f146d485cc1393$var$_2n; // Integer arithmetic\n    return (x)=>{\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\nfunction $b5f146d485cc1393$export$c79df43ecd7e66c2(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n        nBitLength: _nBitLength,\n        nByteLength: nByteLength\n    };\n}\nfunction $b5f146d485cc1393$export$a455218a85c89869(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= $b5f146d485cc1393$var$_0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = $b5f146d485cc1393$export$c79df43ecd7e66c2(ORDER, bitLen);\n    if (BYTES > 2048) throw new Error(\"Field lengths over 2048 bytes are not supported\");\n    const sqrtP = $b5f146d485cc1393$export$33bda048c6b8ea7d(ORDER);\n    const f = Object.freeze({\n        ORDER: ORDER,\n        BITS: BITS,\n        BYTES: BYTES,\n        MASK: (0, $52MQK.bitMask)(BITS),\n        ZERO: $b5f146d485cc1393$var$_0n,\n        ONE: $b5f146d485cc1393$var$_1n,\n        create: (num)=>$b5f146d485cc1393$export$842a2cf37af977e1(num, ORDER),\n        isValid: (num)=>{\n            if (typeof num !== \"bigint\") throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return $b5f146d485cc1393$var$_0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num)=>num === $b5f146d485cc1393$var$_0n,\n        isOdd: (num)=>(num & $b5f146d485cc1393$var$_1n) === $b5f146d485cc1393$var$_1n,\n        neg: (num)=>$b5f146d485cc1393$export$842a2cf37af977e1(-num, ORDER),\n        eql: (lhs, rhs)=>lhs === rhs,\n        sqr: (num)=>$b5f146d485cc1393$export$842a2cf37af977e1(num * num, ORDER),\n        add: (lhs, rhs)=>$b5f146d485cc1393$export$842a2cf37af977e1(lhs + rhs, ORDER),\n        sub: (lhs, rhs)=>$b5f146d485cc1393$export$842a2cf37af977e1(lhs - rhs, ORDER),\n        mul: (lhs, rhs)=>$b5f146d485cc1393$export$842a2cf37af977e1(lhs * rhs, ORDER),\n        pow: (num, power)=>$b5f146d485cc1393$export$5d8ce3717733a987(f, num, power),\n        div: (lhs, rhs)=>$b5f146d485cc1393$export$842a2cf37af977e1(lhs * $b5f146d485cc1393$export$6897c284b6f9f4dc(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num)=>num * num,\n        addN: (lhs, rhs)=>lhs + rhs,\n        subN: (lhs, rhs)=>lhs - rhs,\n        mulN: (lhs, rhs)=>lhs * rhs,\n        inv: (num)=>$b5f146d485cc1393$export$6897c284b6f9f4dc(num, ORDER),\n        sqrt: redef.sqrt || ((n)=>sqrtP(f, n)),\n        invertBatch: (lst)=>$b5f146d485cc1393$export$a492e3387142c0e9(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c)=>c ? b : a,\n        toBytes: (num)=>isLE ? (0, $52MQK.numberToBytesLE)(num, BYTES) : (0, $52MQK.numberToBytesBE)(num, BYTES),\n        fromBytes: (bytes)=>{\n            if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0, $52MQK.bytesToNumberLE)(bytes) : (0, $52MQK.bytesToNumberBE)(bytes);\n        }\n    });\n    return Object.freeze(f);\n}\nfunction $b5f146d485cc1393$export$7acc54692c525d2a(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction $b5f146d485cc1393$export$1d7b691df0888e02(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\nfunction $b5f146d485cc1393$export$d3b0e8260d5dbad4(hash, groupOrder, isLE = false) {\n    hash = (0, $52MQK.ensureBytes)(\"privateHash\", hash);\n    const hashLen = hash.length;\n    const minLen = $b5f146d485cc1393$export$c79df43ecd7e66c2(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0, $52MQK.bytesToNumberLE)(hash) : (0, $52MQK.bytesToNumberBE)(hash);\n    return $b5f146d485cc1393$export$842a2cf37af977e1(num, groupOrder - $b5f146d485cc1393$var$_1n) + $b5f146d485cc1393$var$_1n;\n}\nfunction $b5f146d485cc1393$export$9cf21a9392b0fcfc(fieldOrder) {\n    if (typeof fieldOrder !== \"bigint\") throw new Error(\"field order must be bigint\");\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\nfunction $b5f146d485cc1393$export$d058763b563056af(fieldOrder) {\n    const length = $b5f146d485cc1393$export$9cf21a9392b0fcfc(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\nfunction $b5f146d485cc1393$export$20cb21dbfa61dac3(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = $b5f146d485cc1393$export$9cf21a9392b0fcfc(fieldOrder);\n    const minLen = $b5f146d485cc1393$export$d058763b563056af(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0, $52MQK.bytesToNumberBE)(key) : (0, $52MQK.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = $b5f146d485cc1393$export$842a2cf37af977e1(num, fieldOrder - $b5f146d485cc1393$var$_1n) + $b5f146d485cc1393$var$_1n;\n    return isLE ? (0, $52MQK.numberToBytesLE)(reduced, fieldLen) : (0, $52MQK.numberToBytesBE)(reduced, fieldLen);\n}\n\n});\nparcelRegister(\"52MQK\", function(module, exports) {\n\n$parcel$export(module.exports, \"isBytes\", function () { return $3ac3082dca6e5f66$export$c6fabfbfd097fc30; });\n$parcel$export(module.exports, \"abytes\", function () { return $3ac3082dca6e5f66$export$e8a750b9efad93f5; });\n$parcel$export(module.exports, \"bytesToHex\", function () { return $3ac3082dca6e5f66$export$58b867e287a802c8; });\n$parcel$export(module.exports, \"numberToHexUnpadded\", function () { return $3ac3082dca6e5f66$export$4ed2545b622827c1; });\n$parcel$export(module.exports, \"hexToNumber\", function () { return $3ac3082dca6e5f66$export$d57f2bacc26b4249; });\n$parcel$export(module.exports, \"hexToBytes\", function () { return $3ac3082dca6e5f66$export$31c96b9df38bc8d4; });\n$parcel$export(module.exports, \"bytesToNumberBE\", function () { return $3ac3082dca6e5f66$export$d609354794974f8; });\n$parcel$export(module.exports, \"bytesToNumberLE\", function () { return $3ac3082dca6e5f66$export$d67b1d03392107e7; });\n$parcel$export(module.exports, \"numberToBytesBE\", function () { return $3ac3082dca6e5f66$export$1459dafd057611cb; });\n$parcel$export(module.exports, \"numberToBytesLE\", function () { return $3ac3082dca6e5f66$export$ba2172e58d139f6d; });\n$parcel$export(module.exports, \"numberToVarBytesBE\", function () { return $3ac3082dca6e5f66$export$80ee8c1914de6dde; });\n$parcel$export(module.exports, \"ensureBytes\", function () { return $3ac3082dca6e5f66$export$3cb5d50a3a30e837; });\n$parcel$export(module.exports, \"concatBytes\", function () { return $3ac3082dca6e5f66$export$287dd7971339c972; });\n$parcel$export(module.exports, \"equalBytes\", function () { return $3ac3082dca6e5f66$export$2aa59cef064b0333; });\n$parcel$export(module.exports, \"utf8ToBytes\", function () { return $3ac3082dca6e5f66$export$3df70a15530b5e81; });\n$parcel$export(module.exports, \"bitLen\", function () { return $3ac3082dca6e5f66$export$e93ef600c41761a9; });\n$parcel$export(module.exports, \"bitGet\", function () { return $3ac3082dca6e5f66$export$9577d112d1fd46ad; });\n$parcel$export(module.exports, \"bitSet\", function () { return $3ac3082dca6e5f66$export$967bb2b9787441cb; });\n$parcel$export(module.exports, \"bitMask\", function () { return $3ac3082dca6e5f66$export$803efa2fa1c7279; });\n$parcel$export(module.exports, \"createHmacDrbg\", function () { return $3ac3082dca6e5f66$export$d459d139192e4fba; });\n$parcel$export(module.exports, \"validateObject\", function () { return $3ac3082dca6e5f66$export$381bae2d0f08004f; });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst $3ac3082dca6e5f66$var$_0n = BigInt(0);\nconst $3ac3082dca6e5f66$var$_1n = BigInt(1);\nconst $3ac3082dca6e5f66$var$_2n = BigInt(2);\nfunction $3ac3082dca6e5f66$export$c6fabfbfd097fc30(a) {\n    return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n}\nfunction $3ac3082dca6e5f66$export$e8a750b9efad93f5(item) {\n    if (!$3ac3082dca6e5f66$export$c6fabfbfd097fc30(item)) throw new Error(\"Uint8Array expected\");\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst $3ac3082dca6e5f66$var$hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\nfunction $3ac3082dca6e5f66$export$58b867e287a802c8(bytes) {\n    $3ac3082dca6e5f66$export$e8a750b9efad93f5(bytes);\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++)hex += $3ac3082dca6e5f66$var$hexes[bytes[i]];\n    return hex;\n}\nfunction $3ac3082dca6e5f66$export$4ed2545b622827c1(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction $3ac3082dca6e5f66$export$d57f2bacc26b4249(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    // Big Endian\n    return BigInt(hex === \"\" ? \"0\" : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst $3ac3082dca6e5f66$var$asciis = {\n    _0: 48,\n    _9: 57,\n    _A: 65,\n    _F: 70,\n    _a: 97,\n    _f: 102\n};\nfunction $3ac3082dca6e5f66$var$asciiToBase16(char) {\n    if (char >= $3ac3082dca6e5f66$var$asciis._0 && char <= $3ac3082dca6e5f66$var$asciis._9) return char - $3ac3082dca6e5f66$var$asciis._0;\n    if (char >= $3ac3082dca6e5f66$var$asciis._A && char <= $3ac3082dca6e5f66$var$asciis._F) return char - ($3ac3082dca6e5f66$var$asciis._A - 10);\n    if (char >= $3ac3082dca6e5f66$var$asciis._a && char <= $3ac3082dca6e5f66$var$asciis._f) return char - ($3ac3082dca6e5f66$var$asciis._a - 10);\n    return;\n}\nfunction $3ac3082dca6e5f66$export$31c96b9df38bc8d4(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = $3ac3082dca6e5f66$var$asciiToBase16(hex.charCodeAt(hi));\n        const n2 = $3ac3082dca6e5f66$var$asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\nfunction $3ac3082dca6e5f66$export$d609354794974f8(bytes) {\n    return $3ac3082dca6e5f66$export$d57f2bacc26b4249($3ac3082dca6e5f66$export$58b867e287a802c8(bytes));\n}\nfunction $3ac3082dca6e5f66$export$d67b1d03392107e7(bytes) {\n    $3ac3082dca6e5f66$export$e8a750b9efad93f5(bytes);\n    return $3ac3082dca6e5f66$export$d57f2bacc26b4249($3ac3082dca6e5f66$export$58b867e287a802c8(Uint8Array.from(bytes).reverse()));\n}\nfunction $3ac3082dca6e5f66$export$1459dafd057611cb(n, len) {\n    return $3ac3082dca6e5f66$export$31c96b9df38bc8d4(n.toString(16).padStart(len * 2, \"0\"));\n}\nfunction $3ac3082dca6e5f66$export$ba2172e58d139f6d(n, len) {\n    return $3ac3082dca6e5f66$export$1459dafd057611cb(n, len).reverse();\n}\nfunction $3ac3082dca6e5f66$export$80ee8c1914de6dde(n) {\n    return $3ac3082dca6e5f66$export$31c96b9df38bc8d4($3ac3082dca6e5f66$export$4ed2545b622827c1(n));\n}\nfunction $3ac3082dca6e5f66$export$3cb5d50a3a30e837(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === \"string\") try {\n        res = $3ac3082dca6e5f66$export$31c96b9df38bc8d4(hex);\n    } catch (e) {\n        throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n    else if ($3ac3082dca6e5f66$export$c6fabfbfd097fc30(hex)) // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n    else throw new Error(`${title} must be hex string or Uint8Array`);\n    const len = res.length;\n    if (typeof expectedLength === \"number\" && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\nfunction $3ac3082dca6e5f66$export$287dd7971339c972(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        $3ac3082dca6e5f66$export$e8a750b9efad93f5(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nfunction $3ac3082dca6e5f66$export$2aa59cef064b0333(a, b) {\n    if (a.length !== b.length) return false;\n    let diff = 0;\n    for(let i = 0; i < a.length; i++)diff |= a[i] ^ b[i];\n    return diff === 0;\n}\nfunction $3ac3082dca6e5f66$export$3df70a15530b5e81(str) {\n    if (typeof str !== \"string\") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nfunction $3ac3082dca6e5f66$export$e93ef600c41761a9(n) {\n    let len;\n    for(len = 0; n > $3ac3082dca6e5f66$var$_0n; n >>= $3ac3082dca6e5f66$var$_1n, len += 1);\n    return len;\n}\nfunction $3ac3082dca6e5f66$export$9577d112d1fd46ad(n, pos) {\n    return n >> BigInt(pos) & $3ac3082dca6e5f66$var$_1n;\n}\nfunction $3ac3082dca6e5f66$export$967bb2b9787441cb(n, pos, value) {\n    return n | (value ? $3ac3082dca6e5f66$var$_1n : $3ac3082dca6e5f66$var$_0n) << BigInt(pos);\n}\nconst $3ac3082dca6e5f66$export$803efa2fa1c7279 = (n)=>($3ac3082dca6e5f66$var$_2n << BigInt(n - 1)) - $3ac3082dca6e5f66$var$_1n;\n// DRBG\nconst $3ac3082dca6e5f66$var$u8n = (data)=>new Uint8Array(data); // creates Uint8Array\nconst $3ac3082dca6e5f66$var$u8fr = (arr)=>Uint8Array.from(arr); // another shortcut\nfunction $3ac3082dca6e5f66$export$d459d139192e4fba(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== \"number\" || hashLen < 2) throw new Error(\"hashLen must be a number\");\n    if (typeof qByteLen !== \"number\" || qByteLen < 2) throw new Error(\"qByteLen must be a number\");\n    if (typeof hmacFn !== \"function\") throw new Error(\"hmacFn must be a function\");\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = $3ac3082dca6e5f66$var$u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = $3ac3082dca6e5f66$var$u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = ()=>{\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = $3ac3082dca6e5f66$var$u8n())=>{\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h($3ac3082dca6e5f66$var$u8fr([\n            0x00\n        ]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0) return;\n        k = h($3ac3082dca6e5f66$var$u8fr([\n            0x01\n        ]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = ()=>{\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000) throw new Error(\"drbg: tried 1000 values\");\n        let len = 0;\n        const out = [];\n        while(len < qByteLen){\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return $3ac3082dca6e5f66$export$287dd7971339c972(...out);\n    };\n    const genUntil = (seed, pred)=>{\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while(!(res = pred(gen())))reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst $3ac3082dca6e5f66$var$validatorFns = {\n    bigint: (val)=>typeof val === \"bigint\",\n    function: (val)=>typeof val === \"function\",\n    boolean: (val)=>typeof val === \"boolean\",\n    string: (val)=>typeof val === \"string\",\n    stringOrUint8Array: (val)=>typeof val === \"string\" || $3ac3082dca6e5f66$export$c6fabfbfd097fc30(val),\n    isSafeInteger: (val)=>Number.isSafeInteger(val),\n    array: (val)=>Array.isArray(val),\n    field: (val, object)=>object.Fp.isValid(val),\n    hash: (val)=>typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n};\nfunction $3ac3082dca6e5f66$export$381bae2d0f08004f(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional)=>{\n        const checkVal = $3ac3082dca6e5f66$var$validatorFns[type];\n        if (typeof checkVal !== \"function\") throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined) return;\n        if (!checkVal(val, object)) throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n    };\n    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);\n    return object;\n} // validate type tests\n // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n // // Should fail type-check\n // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n});\n\n\nparcelRegister(\"iMxCB\", function(module, exports) {\n\n$parcel$export(module.exports, \"weierstrass\", function () { return $dac6ca3a592c4887$export$350b8ea6f1c27fae; });\n$parcel$export(module.exports, \"mapToCurveSimpleSWU\", function () { return $dac6ca3a592c4887$export$cc7fea9756a17416; });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\nvar $fCtua = parcelRequire(\"fCtua\");\n\nvar $52MQK = parcelRequire(\"52MQK\");\n\nvar $6YQ00 = parcelRequire(\"6YQ00\");\nfunction $dac6ca3a592c4887$var$validatePointOpts(curve) {\n    const opts = (0, $6YQ00.validateBasic)(curve);\n    $52MQK.validateObject(opts, {\n        a: \"field\",\n        b: \"field\"\n    }, {\n        allowedPrivateKeyLengths: \"array\",\n        wrapPrivateKey: \"boolean\",\n        isTorsionFree: \"function\",\n        clearCofactor: \"function\",\n        allowInfinityPoint: \"boolean\",\n        fromBytes: \"function\",\n        toBytes: \"function\"\n    });\n    const { endo: endo, Fp: Fp, a: a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) throw new Error(\"Endomorphism can only be defined for Koblitz curves that have a=0\");\n        if (typeof endo !== \"object\" || typeof endo.beta !== \"bigint\" || typeof endo.splitScalar !== \"function\") throw new Error(\"Expected endomorphism with beta: bigint and splitScalar: function\");\n    }\n    return Object.freeze({\n        ...opts\n    });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: $dac6ca3a592c4887$var$b2n, hexToBytes: $dac6ca3a592c4887$var$h2b } = $52MQK;\nconst $dac6ca3a592c4887$export$56ac33195d7076db = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = \"\"){\n            super(m);\n        }\n    },\n    _parseInt (data) {\n        const { Err: E } = $dac6ca3a592c4887$export$56ac33195d7076db;\n        if (data.length < 2 || data[0] !== 0x02) throw new E(\"Invalid signature integer tag\");\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len) throw new E(\"Invalid signature integer: wrong length\");\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 128) throw new E(\"Invalid signature integer: negative\");\n        if (res[0] === 0x00 && !(res[1] & 128)) throw new E(\"Invalid signature integer: unnecessary leading zero\");\n        return {\n            d: $dac6ca3a592c4887$var$b2n(res),\n            l: data.subarray(len + 2)\n        }; // d is data, l is left\n    },\n    toSig (hex) {\n        // parse DER signature\n        const { Err: E } = $dac6ca3a592c4887$export$56ac33195d7076db;\n        const data = typeof hex === \"string\" ? $dac6ca3a592c4887$var$h2b(hex) : hex;\n        $52MQK.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30) throw new E(\"Invalid signature tag\");\n        if (data[1] !== l - 2) throw new E(\"Invalid signature: incorrect length\");\n        const { d: r, l: sBytes } = $dac6ca3a592c4887$export$56ac33195d7076db._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = $dac6ca3a592c4887$export$56ac33195d7076db._parseInt(sBytes);\n        if (rBytesLeft.length) throw new E(\"Invalid signature: left bytes after parsing\");\n        return {\n            r: r,\n            s: s\n        };\n    },\n    hexFromSig (sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s)=>Number.parseInt(s[0], 16) & 8 ? \"00\" + s : s;\n        const h = (num)=>{\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst $dac6ca3a592c4887$var$_0n = BigInt(0), $dac6ca3a592c4887$var$_1n = BigInt(1), $dac6ca3a592c4887$var$_2n = BigInt(2), $dac6ca3a592c4887$var$_3n = BigInt(3), $dac6ca3a592c4887$var$_4n = BigInt(4);\nfunction $dac6ca3a592c4887$export$fa783af82e4fe0fc(opts) {\n    const CURVE = $dac6ca3a592c4887$var$validatePointOpts(opts);\n    const { Fp: Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes || ((_c, point, _isCompressed)=>{\n        const a = point.toAffine();\n        return $52MQK.concatBytes(Uint8Array.from([\n            0x04\n        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n    const fromBytes = CURVE.fromBytes || ((bytes)=>{\n        // const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n            x: x,\n            y: y\n        };\n    });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */ function weierstrassEquation(x) {\n        const { a: a, b: b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error(\"bad generator point: equation left != right\");\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === \"bigint\" && $dac6ca3a592c4887$var$_0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num)) throw new Error(\"Expected valid bigint: 0 < bigint < curve.n\");\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength: nByteLength, wrapPrivateKey: wrapPrivateKey, n: n } = CURVE;\n        if (lengths && typeof key !== \"bigint\") {\n            if ($52MQK.isBytes(key)) key = $52MQK.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== \"string\" || !lengths.includes(key.length)) throw new Error(\"Invalid key\");\n            key = key.padStart(nByteLength * 2, \"0\");\n        }\n        let num;\n        try {\n            num = typeof key === \"bigint\" ? key : $52MQK.bytesToNumberBE((0, $52MQK.ensureBytes)(\"private key\", key, nByteLength));\n        } catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey) num = $fCtua.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point)) throw new Error(\"ProjectivePoint expected\");\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */ class Point {\n        constructor(px, py, pz){\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px)) throw new Error(\"x required\");\n            if (py == null || !Fp.isValid(py)) throw new Error(\"y required\");\n            if (pz == null || !Fp.isValid(pz)) throw new Error(\"z required\");\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x: x, y: y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"invalid affine point\");\n            if (p instanceof Point) throw new Error(\"projective point not allowed\");\n            const is0 = (i)=>Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y)) return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */ static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p)=>p.pz));\n            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */ static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0, $52MQK.ensureBytes)(\"pointHex\", hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n                throw new Error(\"bad point: ZERO\");\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x: x, y: y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"bad point: x or y not FE\");\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right)) throw new Error(\"bad point: equation left != right\");\n            if (!this.isTorsionFree()) throw new Error(\"bad point: not in prime-order subgroup\");\n        }\n        hasEvenY() {\n            const { y: y } = this.toAffine();\n            if (Fp.isOdd) return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */ equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */ negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a: a, b: b } = CURVE;\n            const b3 = Fp.mul(b, $dac6ca3a592c4887$var$_3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, $dac6ca3a592c4887$var$_3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp)=>{\n                const toInv = Fp.invertBatch(comp.map((p)=>p.pz));\n                return comp.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */ multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === $dac6ca3a592c4887$var$_0n) return I;\n            assertGE(n); // Will throw on 0\n            if (n === $dac6ca3a592c4887$var$_1n) return this;\n            const { endo: endo } = CURVE;\n            if (!endo) return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg: k1neg, k1: k1, k2neg: k2neg, k2: k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while(k1 > $dac6ca3a592c4887$var$_0n || k2 > $dac6ca3a592c4887$var$_0n){\n                if (k1 & $dac6ca3a592c4887$var$_1n) k1p = k1p.add(d);\n                if (k2 & $dac6ca3a592c4887$var$_1n) k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= $dac6ca3a592c4887$var$_1n;\n                k2 >>= $dac6ca3a592c4887$var$_1n;\n            }\n            if (k1neg) k1p = k1p.negate();\n            if (k2neg) k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */ multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo: endo } = CURVE;\n            if (endo) {\n                const { k1neg: k1neg, k1: k1, k2neg: k2neg, k2: k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            } else {\n                const { p: p, f: f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([\n                point,\n                fake\n            ])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */ multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            )=>a === $dac6ca3a592c4887$var$_0n || a === $dac6ca3a592c4887$var$_1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0) return {\n                x: Fp.ZERO,\n                y: Fp.ZERO\n            };\n            if (!Fp.eql(zz, Fp.ONE)) throw new Error(\"invZ was invalid\");\n            return {\n                x: ax,\n                y: ay\n            };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree: isTorsionFree } = CURVE;\n            if (cofactor === $dac6ca3a592c4887$var$_1n) return true; // No subgroups, always torsion-free\n            if (isTorsionFree) return isTorsionFree(Point, this);\n            throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor: clearCofactor } = CURVE;\n            if (cofactor === $dac6ca3a592c4887$var$_1n) return this; // Fast-path\n            if (clearCofactor) return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return $52MQK.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0, $6YQ00.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE: CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        weierstrassEquation: weierstrassEquation,\n        isWithinCurveOrder: isWithinCurveOrder\n    };\n}\nfunction $dac6ca3a592c4887$var$validateOpts(curve) {\n    const opts = (0, $6YQ00.validateBasic)(curve);\n    $52MQK.validateObject(opts, {\n        hash: \"hash\",\n        hmac: \"function\",\n        randomBytes: \"function\"\n    }, {\n        bits2int: \"function\",\n        bits2int_modN: \"function\",\n        lowS: \"boolean\"\n    });\n    return Object.freeze({\n        lowS: true,\n        ...opts\n    });\n}\nfunction $dac6ca3a592c4887$export$350b8ea6f1c27fae(curveDef) {\n    const CURVE = $dac6ca3a592c4887$var$validateOpts(curveDef);\n    const { Fp: Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return $dac6ca3a592c4887$var$_0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return $fCtua.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return $fCtua.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar: normPrivateKeyToScalar, weierstrassEquation: weierstrassEquation, isWithinCurveOrder: isWithinCurveOrder } = $dac6ca3a592c4887$export$fa783af82e4fe0fc({\n        ...CURVE,\n        toBytes (_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = $52MQK.concatBytes;\n            if (isCompressed) return cat(Uint8Array.from([\n                point.hasEvenY() ? 0x02 : 0x03\n            ]), x);\n            else return cat(Uint8Array.from([\n                0x04\n            ]), x, Fp.toBytes(a.y));\n        },\n        fromBytes (bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = $52MQK.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x)) throw new Error(\"Point is not on curve\");\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                } catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? \": \" + sqrtError.message : \"\";\n                    throw new Error(\"Point is not on curve\" + suffix);\n                }\n                const isYOdd = (y & $dac6ca3a592c4887$var$_1n) === $dac6ca3a592c4887$var$_1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n                return {\n                    x: x,\n                    y: y\n                };\n            } else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return {\n                    x: x,\n                    y: y\n                };\n            } else throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n        }\n    });\n    const numToNByteStr = (num)=>$52MQK.bytesToHex($52MQK.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> $dac6ca3a592c4887$var$_1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to)=>$52MQK.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */ class Signature {\n        constructor(r, s, recovery){\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0, $52MQK.ensureBytes)(\"compactSignature\", hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r: r, s: s } = $dac6ca3a592c4887$export$56ac33195d7076db.toSig((0, $52MQK.ensureBytes)(\"DER\", hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r)) throw new Error(\"r must be 0 < r < CURVE.n\");\n            if (!isWithinCurveOrder(this.s)) throw new Error(\"s must be 0 < s < CURVE.n\");\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r: r, s: s, recovery: rec } = this;\n            const h = bits2int_modN((0, $52MQK.ensureBytes)(\"msgHash\", msgHash)); // Truncate hash\n            if (rec == null || ![\n                0,\n                1,\n                2,\n                3\n            ].includes(rec)) throw new Error(\"recovery id invalid\");\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER) throw new Error(\"recovery id 2 or 3 invalid\");\n            const prefix = (rec & 1) === 0 ? \"02\" : \"03\";\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q) throw new Error(\"point at infinify\"); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return $52MQK.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return $dac6ca3a592c4887$export$56ac33195d7076db.hexFromSig({\n                r: this.r,\n                s: this.s\n            });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return $52MQK.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey (privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            } catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */ randomPrivateKey: ()=>{\n            const length = $fCtua.getMinHashLength(CURVE.n);\n            return $fCtua.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */ precompute (windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        }\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */ function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */ function isProbPub(item) {\n        const arr = $52MQK.isBytes(item);\n        const str = typeof item === \"string\";\n        const len = (arr || str) && item.length;\n        if (arr) return len === compressedLen || len === uncompressedLen;\n        if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point) return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */ function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA)) throw new Error(\"first arg must be private key\");\n        if (!isProbPub(publicB)) throw new Error(\"second arg must be public key\");\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int || function(bytes) {\n        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n        // for some cases, since bytes.length * 8 is not actual bitLength.\n        const num = $52MQK.bytesToNumberBE(bytes); // check for == u8 done here\n        const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n        return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {\n        return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = $52MQK.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */ function int2octets(num) {\n        if (typeof num !== \"bigint\") throw new Error(\"bigint expected\");\n        if (!($dac6ca3a592c4887$var$_0n <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return $52MQK.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if ([\n            \"recovered\",\n            \"canonical\"\n        ].some((k)=>k in opts)) throw new Error(\"sign() legacy options not supported\");\n        const { hash: hash, randomBytes: randomBytes } = CURVE;\n        let { lowS: lowS, prehash: prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0, $52MQK.ensureBytes)(\"msgHash\", msgHash);\n        if (prehash) msgHash = (0, $52MQK.ensureBytes)(\"prehashed msgHash\", hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [\n            int2octets(d),\n            int2octets(h1int)\n        ];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0, $52MQK.ensureBytes)(\"extraEntropy\", e)); // check for being bytes\n        }\n        const seed = $52MQK.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === $dac6ca3a592c4887$var$_0n) return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === $dac6ca3a592c4887$var$_0n) return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & $dac6ca3a592c4887$var$_1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return {\n            seed: seed,\n            k2sig: k2sig\n        };\n    }\n    const defaultSigOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    const defaultVerOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */ function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed: seed, k2sig: k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = $52MQK.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */ function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0, $52MQK.ensureBytes)(\"msgHash\", msgHash);\n        publicKey = (0, $52MQK.ensureBytes)(\"publicKey\", publicKey);\n        if (\"strict\" in opts) throw new Error(\"options.strict was renamed to lowS\");\n        const { lowS: lowS, prehash: prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === \"string\" || $52MQK.isBytes(sg)) // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n            // Since DER can also be 2*nByteLength bytes, we check for it first.\n            try {\n                _sig = Signature.fromDER(sg);\n            } catch (derError) {\n                if (!(derError instanceof $dac6ca3a592c4887$export$56ac33195d7076db.Err)) throw derError;\n                _sig = Signature.fromCompact(sg);\n            }\n            else if (typeof sg === \"object\" && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\") {\n                const { r: r, s: s } = sg;\n                _sig = new Signature(r, s);\n            } else throw new Error(\"PARSE\");\n            P = Point.fromHex(publicKey);\n        } catch (error) {\n            if (error.message === \"PARSE\") throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS()) return false;\n        if (prehash) msgHash = CURVE.hash(msgHash);\n        const { r: r, s: s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R) return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE: CURVE,\n        getPublicKey: getPublicKey,\n        getSharedSecret: getSharedSecret,\n        sign: sign,\n        verify: verify,\n        ProjectivePoint: Point,\n        Signature: Signature,\n        utils: utils\n    };\n}\nfunction $dac6ca3a592c4887$export$8324ae9483e33241(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = $dac6ca3a592c4887$var$_0n;\n    for(let o = q - $dac6ca3a592c4887$var$_1n; o % $dac6ca3a592c4887$var$_2n === $dac6ca3a592c4887$var$_0n; o /= $dac6ca3a592c4887$var$_2n)l += $dac6ca3a592c4887$var$_1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = $dac6ca3a592c4887$var$_2n << c1 - $dac6ca3a592c4887$var$_1n - $dac6ca3a592c4887$var$_1n;\n    const _2n_pow_c1 = _2n_pow_c1_1 * $dac6ca3a592c4887$var$_2n;\n    const c2 = (q - $dac6ca3a592c4887$var$_1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - $dac6ca3a592c4887$var$_1n) / $dac6ca3a592c4887$var$_2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - $dac6ca3a592c4887$var$_1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + $dac6ca3a592c4887$var$_1n) / $dac6ca3a592c4887$var$_2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v)=>{\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for(let i = c1; i > $dac6ca3a592c4887$var$_1n; i--){\n            let tv5 = i - $dac6ca3a592c4887$var$_2n; // 18.    tv5 = i - 2\n            tv5 = $dac6ca3a592c4887$var$_2n << tv5 - $dac6ca3a592c4887$var$_1n; // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return {\n            isValid: isQR,\n            value: tv3\n        };\n    };\n    if (Fp.ORDER % $dac6ca3a592c4887$var$_4n === $dac6ca3a592c4887$var$_3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - $dac6ca3a592c4887$var$_3n) / $dac6ca3a592c4887$var$_4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v)=>{\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return {\n                isValid: isQR,\n                value: y\n            }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\nfunction $dac6ca3a592c4887$export$cc7fea9756a17416(Fp, opts) {\n    $fCtua.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error(\"mapToCurveSimpleSWU: invalid opts\");\n    const sqrtRatio = $dac6ca3a592c4887$export$8324ae9483e33241(Fp, opts.Z);\n    if (!Fp.isOdd) throw new Error(\"Fp.isOdd is not implemented!\");\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u)=>{\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid: isValid, value: value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return {\n            x: x,\n            y: y\n        };\n    };\n}\n\n});\nparcelRegister(\"6YQ00\", function(module, exports) {\n\n$parcel$export(module.exports, \"wNAF\", function () { return wNAF; });\n$parcel$export(module.exports, \"validateBasic\", function () { return validateBasic; });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Abelian group utilities\n\nvar $fCtua = parcelRequire(\"fCtua\");\n\nvar $52MQK = parcelRequire(\"52MQK\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item)=>{\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W)=>{\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return {\n            windows: windows,\n            windowSize: windowSize\n        };\n    };\n    return {\n        constTimeNegate: constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder (elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while(n > _0n){\n                if (n & _1n) p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */ precomputeWindow (elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for(let window = 0; window < windows; window++){\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for(let i = 1; i < windowSize; i++){\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */ wNAF (W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for(let window = 0; window < windows; window++){\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) // The most important part for const-time getPublicKey\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                else p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return {\n                p: p,\n                f: f\n            };\n        },\n        wNAFCached (P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) precomputesMap.set(P, transform(comp));\n            }\n            return this.wNAF(W, comp, n);\n        }\n    };\n}\nfunction validateBasic(curve) {\n    (0, $fCtua.validateField)(curve.Fp);\n    (0, $52MQK.validateObject)(curve, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0, $fCtua.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        p: curve.Fp.ORDER\n    });\n}\n\n});\n\n\nparcelRegister(\"k5yZc\", function(module, exports) {\n\n$parcel$export(module.exports, \"isogenyMap\", function () { return $e9ff69c372df37dd$export$9393380cf1075f28; });\n$parcel$export(module.exports, \"createHasher\", function () { return $e9ff69c372df37dd$export$14b114effbc08b6b; });\n\nvar $fCtua = parcelRequire(\"fCtua\");\n\nvar $52MQK = parcelRequire(\"52MQK\");\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst $e9ff69c372df37dd$var$os2ip = (0, $52MQK.bytesToNumberBE);\n// Integer to Octet Stream (numberToBytesBE)\nfunction $e9ff69c372df37dd$var$i2osp(value, length) {\n    if (value < 0 || value >= 1 << 8 * length) throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    const res = Array.from({\n        length: length\n    }).fill(0);\n    for(let i = length - 1; i >= 0; i--){\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction $e9ff69c372df37dd$var$strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for(let i = 0; i < a.length; i++)arr[i] = a[i] ^ b[i];\n    return arr;\n}\nfunction $e9ff69c372df37dd$var$anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error(\"number expected\");\n}\nfunction $e9ff69c372df37dd$export$3df78c69af9fc85d(msg, DST, lenInBytes, H) {\n    (0, $52MQK.abytes)(msg);\n    (0, $52MQK.abytes)(DST);\n    $e9ff69c372df37dd$var$anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0, $52MQK.concatBytes)((0, $52MQK.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255) throw new Error(\"Invalid xmd length\");\n    const DST_prime = (0, $52MQK.concatBytes)(DST, $e9ff69c372df37dd$var$i2osp(DST.length, 1));\n    const Z_pad = $e9ff69c372df37dd$var$i2osp(0, r_in_bytes);\n    const l_i_b_str = $e9ff69c372df37dd$var$i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, $52MQK.concatBytes)(Z_pad, msg, l_i_b_str, $e9ff69c372df37dd$var$i2osp(0, 1), DST_prime));\n    b[0] = H((0, $52MQK.concatBytes)(b_0, $e9ff69c372df37dd$var$i2osp(1, 1), DST_prime));\n    for(let i = 1; i <= ell; i++){\n        const args = [\n            $e9ff69c372df37dd$var$strxor(b_0, b[i - 1]),\n            $e9ff69c372df37dd$var$i2osp(i + 1, 1),\n            DST_prime\n        ];\n        b[i] = H((0, $52MQK.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, $52MQK.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\nfunction $e9ff69c372df37dd$export$3f56d6fdbf95d07c(msg, DST, lenInBytes, k, H) {\n    (0, $52MQK.abytes)(msg);\n    (0, $52MQK.abytes)(DST);\n    $e9ff69c372df37dd$var$anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil(2 * k / 8);\n        DST = H.create({\n            dkLen: dkLen\n        }).update((0, $52MQK.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error(\"expand_message_xof: invalid lenInBytes\");\n    return H.create({\n        dkLen: lenInBytes\n    }).update(msg).update($e9ff69c372df37dd$var$i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update($e9ff69c372df37dd$var$i2osp(DST.length, 1)).digest();\n}\nfunction $e9ff69c372df37dd$export$97cdd5ee18de8172(msg, count, options) {\n    (0, $52MQK.validateObject)(options, {\n        DST: \"stringOrUint8Array\",\n        p: \"bigint\",\n        m: \"isSafeInteger\",\n        k: \"isSafeInteger\",\n        hash: \"hash\"\n    });\n    const { p: p, k: k, m: m, hash: hash, expand: expand, DST: _DST } = options;\n    (0, $52MQK.abytes)(msg);\n    $e9ff69c372df37dd$var$anum(count);\n    const DST = typeof _DST === \"string\" ? (0, $52MQK.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === \"xmd\") prb = $e9ff69c372df37dd$export$3df78c69af9fc85d(msg, DST, len_in_bytes, hash);\n    else if (expand === \"xof\") prb = $e9ff69c372df37dd$export$3f56d6fdbf95d07c(msg, DST, len_in_bytes, k, hash);\n    else if (expand === \"_internal_pass\") // for internal tests only\n    prb = msg;\n    else throw new Error('expand must be \"xmd\" or \"xof\"');\n    const u = new Array(count);\n    for(let i = 0; i < count; i++){\n        const e = new Array(m);\n        for(let j = 0; j < m; j++){\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0, $fCtua.mod)($e9ff69c372df37dd$var$os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction $e9ff69c372df37dd$export$9393380cf1075f28(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i)=>Array.from(i).reverse());\n    return (x, y)=>{\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return {\n            x: x,\n            y: y\n        };\n    };\n}\nfunction $e9ff69c372df37dd$export$14b114effbc08b6b(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== \"function\") throw new Error(\"mapToCurve() must be defined\");\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve (msg, options) {\n            const u = $e9ff69c372df37dd$export$97cdd5ee18de8172(msg, 2, {\n                ...def,\n                DST: def.DST,\n                ...options\n            });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve (msg, options) {\n            const u = $e9ff69c372df37dd$export$97cdd5ee18de8172(msg, 1, {\n                ...def,\n                DST: def.encodeDST,\n                ...options\n            });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        }\n    };\n}\n\n});\n\nparcelRegister(\"eZ4PV\", function(module, exports) {\n\n$parcel$export(module.exports, \"createCurve\", function () { return $ae8a83a4b1c3d3fc$export$3f2f6721dd02558a; });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nvar $aFuaN = parcelRequire(\"aFuaN\");\n\nvar $2jOf5 = parcelRequire(\"2jOf5\");\n\nvar $iMxCB = parcelRequire(\"iMxCB\");\nfunction $ae8a83a4b1c3d3fc$export$adaba664e531641c(hash) {\n    return {\n        hash: hash,\n        hmac: (key, ...msgs)=>(0, $aFuaN.hmac)(hash, key, (0, $2jOf5.concatBytes)(...msgs)),\n        randomBytes: $2jOf5.randomBytes\n    };\n}\nfunction $ae8a83a4b1c3d3fc$export$3f2f6721dd02558a(curveDef, defHash) {\n    const create = (hash)=>(0, $iMxCB.weierstrass)({\n            ...curveDef,\n            ...$ae8a83a4b1c3d3fc$export$adaba664e531641c(hash)\n        });\n    return Object.freeze({\n        ...create(defHash),\n        create: create\n    });\n}\n\n});\nparcelRegister(\"aFuaN\", function(module, exports) {\n\n$parcel$export(module.exports, \"hmac\", function () { return $7c452377845d0c82$export$355af40f8ab02f34; });\n\nvar $60h7f = parcelRequire(\"60h7f\");\n\nvar $2jOf5 = parcelRequire(\"2jOf5\");\nclass $7c452377845d0c82$export$7b9cf41ebec74f45 extends (0, $2jOf5.Hash) {\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, $60h7f.hash)(hash);\n        const key = (0, $2jOf5.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 106;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0, $60h7f.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, $60h7f.exists)(this);\n        (0, $60h7f.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash: oHash, iHash: iHash, finished: finished, destroyed: destroyed, blockLen: blockLen, outputLen: outputLen } = this;\n        to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nconst $7c452377845d0c82$export$355af40f8ab02f34 = (hash, key, message)=>new $7c452377845d0c82$export$7b9cf41ebec74f45(hash, key).update(message).digest();\n$7c452377845d0c82$export$355af40f8ab02f34.create = (hash, key)=>new $7c452377845d0c82$export$7b9cf41ebec74f45(hash, key);\n\n});\n\n\n\n\n//# sourceMappingURL=secp256k1.0f99aaf8.js.map\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","import { mod } from './modular.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$4d4f254bf0c59c76$export$529e6123e9353a90","$fH4ic","$fCtua","$iMxCB","$k5yZc","$eZ4PV","$4d4f254bf0c59c76$var$secp256k1P","BigInt","$4d4f254bf0c59c76$var$secp256k1N","$4d4f254bf0c59c76$var$_1n","$4d4f254bf0c59c76$var$_2n","$4d4f254bf0c59c76$var$divNearest","a","b","$4d4f254bf0c59c76$var$Fp","Field","undefined","sqrt","y","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","eql","sqr","Error","createCurve","Fp","Gx","Gy","h","lowS","endo","beta","splitScalar","k","a1","b1","a2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","sha256","$4d4f254bf0c59c76$var$isoMap","ProjectivePoint","isogenyMap","map","i","j","$4d4f254bf0c59c76$var$mapSWU","mapToCurveSimpleSWU","A","B","Z","create","createHasher","scalars","x","DST","encodeDST","p","ORDER","m","expand","hash","$b5f146d485cc1393$export$842a2cf37af977e1","$b5f146d485cc1393$export$fa569bd808b67eef","$b5f146d485cc1393$export$6897c284b6f9f4dc","$b5f146d485cc1393$export$bd454f0cef11418d","$b5f146d485cc1393$export$c79df43ecd7e66c2","$b5f146d485cc1393$export$a455218a85c89869","$b5f146d485cc1393$export$d058763b563056af","$b5f146d485cc1393$export$20cb21dbfa61dac3","$52MQK","$b5f146d485cc1393$var$_0n","$b5f146d485cc1393$var$_1n","$b5f146d485cc1393$var$_2n","$b5f146d485cc1393$var$_3n","$b5f146d485cc1393$var$_4n","$b5f146d485cc1393$var$_5n","$b5f146d485cc1393$var$_8n","result","power","modulo","res","number","u","q","r","gcd","$b5f146d485cc1393$var$FIELD_FIELDS","field","opts","reduce","val","MASK","BYTES","BITS","validateObject","nBitLength","_nBitLength","toString","length","nByteLength","Math","ceil","bitLen","isLE","redef","sqrtP","$b5f146d485cc1393$export$33bda048c6b8ea7d","P","p1div4","pow","n2","mul","nv","sub","ONE","$b5f146d485cc1393$export$69f29ab1f3e9a234","Q","S","legendreC","$b5f146d485cc1393$export$9c297f60e22e3389","num","Q1div2","neg","g","ZERO","ge","f","freeze","bitMask","isValid","is0","isOdd","lhs","rhs","add","$b5f146d485cc1393$export$5d8ce3717733a987","d","div","sqrN","addN","subN","mulN","inv","invertBatch","lst","$b5f146d485cc1393$export$a492e3387142c0e9","nums","tmp","Array","lastMultiplied","acc","inverted","reduceRight","cmov","c","toBytes","numberToBytesLE","numberToBytesBE","fromBytes","bytes","bytesToNumberLE","bytesToNumberBE","$b5f146d485cc1393$export$9cf21a9392b0fcfc","fieldOrder","bitLength","key","len","fieldLen","minLen","reduced","$3ac3082dca6e5f66$export$c6fabfbfd097fc30","$3ac3082dca6e5f66$export$e8a750b9efad93f5","$3ac3082dca6e5f66$export$58b867e287a802c8","$3ac3082dca6e5f66$export$4ed2545b622827c1","$3ac3082dca6e5f66$export$d57f2bacc26b4249","$3ac3082dca6e5f66$export$31c96b9df38bc8d4","$3ac3082dca6e5f66$export$d609354794974f8","$3ac3082dca6e5f66$export$d67b1d03392107e7","$3ac3082dca6e5f66$export$1459dafd057611cb","$3ac3082dca6e5f66$export$ba2172e58d139f6d","$3ac3082dca6e5f66$export$80ee8c1914de6dde","$3ac3082dca6e5f66$export$3cb5d50a3a30e837","$3ac3082dca6e5f66$export$287dd7971339c972","$3ac3082dca6e5f66$export$2aa59cef064b0333","$3ac3082dca6e5f66$export$3df70a15530b5e81","$3ac3082dca6e5f66$export$e93ef600c41761a9","$3ac3082dca6e5f66$export$9577d112d1fd46ad","$3ac3082dca6e5f66$export$967bb2b9787441cb","$3ac3082dca6e5f66$export$803efa2fa1c7279","$3ac3082dca6e5f66$export$d459d139192e4fba","$3ac3082dca6e5f66$export$381bae2d0f08004f","$3ac3082dca6e5f66$var$_0n","$3ac3082dca6e5f66$var$_1n","$3ac3082dca6e5f66$var$_2n","Uint8Array","constructor","name","item","$3ac3082dca6e5f66$var$hexes","from","_","padStart","hex","$3ac3082dca6e5f66$var$asciis","_0","_9","_A","_F","_a","_f","$3ac3082dca6e5f66$var$asciiToBase16","char","hl","al","array","ai","hi","n1","charCodeAt","reverse","title","expectedLength","arrays","sum","pad","diff","str","TextEncoder","encode","pos","value","$3ac3082dca6e5f66$var$u8n","data","$3ac3082dca6e5f66$var$u8fr","arr","hashLen","qByteLen","hmacFn","reset","fill","reseed","seed","gen","out","sl","slice","push","pred","$3ac3082dca6e5f66$var$validatorFns","bigint","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","isArray","object","outputLen","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","$dac6ca3a592c4887$export$350b8ea6f1c27fae","$dac6ca3a592c4887$export$cc7fea9756a17416","$6YQ00","$dac6ca3a592c4887$var$b2n","hexToBytes","$dac6ca3a592c4887$var$h2b","$dac6ca3a592c4887$export$56ac33195d7076db","Err","_parseInt","E","subarray","l","toSig","abytes","sBytes","rBytesLeft","hexFromSig","sig","parseInt","shl","rhl","rl","$dac6ca3a592c4887$var$_0n","$dac6ca3a592c4887$var$_1n","$dac6ca3a592c4887$var$_2n","$dac6ca3a592c4887$var$_3n","$dac6ca3a592c4887$var$_4n","curveDef","CURVE","$dac6ca3a592c4887$var$validateOpts","curve","validateBasic","hmac","randomBytes","bits2int","bits2int_modN","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","invert","Point","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","$dac6ca3a592c4887$export$fa783af82e4fe0fc","$dac6ca3a592c4887$var$validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","_c","point","_isCompressed","toAffine","concatBytes","tail","x2","x3","assertGE","lengths","isBytes","bytesToHex","includes","ensureBytes","error","pointPrecomputes","Map","assertPrjPoint","other","px","py","pz","fromAffine","normalizeZ","points","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","X3","Y3","Z3","t0","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1p","k2p","scalar","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","G","iz","z","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","cat","head","y2","sqrtError","message","numToNByteStr","slcNum","to","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isProbPub","delta","ORDER_MASK","int2octets","defaultSigOpts","prehash","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","k2sig","prepSig","some","extraEntropy","ent","h1int","seedArgs","kBytes","ik","normS","isBiggerThanHalfOrder","drbg","createHmacDrbg","C","verify","signature","publicKey","_sig","derError","sg","is","utils","isValidPrivateKey","randomPrivateKey","getMinHashLength","mapHashToField","precompute","validateField","sqrtRatio","$dac6ca3a592c4887$export$8324ae9483e33241","o","_2n_pow_c1_1","_2n_pow_c1","c3","c4","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","tv6","_0n","_1n","bits","condition","W","windows","elm","precomputeWindow","base","precomputes","mask","maxNumber","shiftBy","offset","wbits","offset2","abs","cond1","cond2","precomputesMap","transform","nLength","$e9ff69c372df37dd$export$9393380cf1075f28","$e9ff69c372df37dd$export$14b114effbc08b6b","$e9ff69c372df37dd$var$os2ip","$e9ff69c372df37dd$var$i2osp","$e9ff69c372df37dd$var$anum","$e9ff69c372df37dd$export$97cdd5ee18de8172","msg","count","options","prb","_DST","utf8ToBytes","L","log2p","len_in_bytes","$e9ff69c372df37dd$export$3df78c69af9fc85d","lenInBytes","H","b_in_bytes","blockLen","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","$e9ff69c372df37dd$var$strxor","pseudo_random_bytes","$e9ff69c372df37dd$export$3f56d6fdbf95d07c","dkLen","update","digest","elm_offset","tv","COEFF","xNum","xDen","yNum","yDen","mapToCurve","def","hashToCurve","u0","encodeToCurve","$ae8a83a4b1c3d3fc$export$3f2f6721dd02558a","$aFuaN","$2jOf5","defHash","weierstrass","msgs","$7c452377845d0c82$export$355af40f8ab02f34","$60h7f","$7c452377845d0c82$export$7b9cf41ebec74f45","Hash","_key","finished","destroyed","iHash","oHash","buf","exists","digestInto","destroy","_cloneInto","getPrototypeOf"],"version":3,"file":"secp256k1.0f99aaf8.js.map"}